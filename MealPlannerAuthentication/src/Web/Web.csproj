<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <SpaRoot>ClientApp\</SpaRoot>
    <SpaProxyServerUrl>https://localhost:44448</SpaProxyServerUrl>
    <SpaProxyLaunchCommand>npm start</SpaProxyLaunchCommand>
    <RootNamespace>invensys.iserve.Web</RootNamespace>
    <AssemblyName>invensys.iserve.Web</AssemblyName>
  </PropertyGroup>

  <ItemGroup>
    <ProjectReference Include="..\Application\Application.csproj" />
    <ProjectReference Include="..\Infrastructure\Infrastructure.csproj" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Azure.Extensions.AspNetCore.Configuration.Secrets" />
    <PackageReference Include="Azure.Identity" />
    <PackageReference Include="Duende.IdentityServer" />
    <PackageReference Include="Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore" />
    <PackageReference Include="Microsoft.AspNetCore.Identity.EntityFrameworkCore" />
    <PackageReference Include="Microsoft.AspNetCore.OpenApi" />
    <PackageReference Include="Microsoft.AspNetCore.Identity.UI" />
    <PackageReference Include="Microsoft.AspNetCore.SpaProxy">
      <!-- The SPA Proxy is only used at development time -->
      <Publish>false</Publish>
    </PackageReference>
    <PackageReference Include="Microsoft.Extensions.Diagnostics.HealthChecks.EntityFrameworkCore" />
    <PackageReference Include="NReco.Logging.File" />
    <PackageReference Include="NSwag.AspNetCore" />
    <PackageReference Include="NSwag.MSBuild">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="FluentValidation.AspNetCore" />
    <PackageReference Include="OpenTelemetry.Instrumentation.AspNetCore" />
    <PackageReference Include="Sentry" />
    <PackageReference Include="Sentry.AspNetCore" />
    <PackageReference Include="Sentry.OpenTelemetry" />
    <PackageReference Include="ZymLabs.NSwag.FluentValidation.AspNetCore" />
  </ItemGroup>

  <ItemGroup>
    <!-- Don't publish the SPA source files, but do show them in the project files list -->
    <Compile Remove="keys\**" />
    <Content Remove="$(SpaRoot)**" />
    <Content Remove="keys\**" />
    <EmbeddedResource Remove="keys\**" />
    <None Remove="$(SpaRoot)**" />
    <None Remove="keys\**" />
    <None Include="$(SpaRoot)**" Exclude="$(SpaRoot)node_modules\**" />
  </ItemGroup>

  <!--<ItemGroup>
    <None Remove="ClientApp\src\app\auth.config.module.ts" />
  </ItemGroup>-->

  <ItemGroup>
    <Folder Include="wwwroot\api\" />
  </ItemGroup>

  <ItemGroup>
    <None Include="Pages\Account\AccessDenied.cshtml" />
    <None Include="Pages\Account\Login\Index.cshtml" />
    <None Include="Pages\Account\Logout\Index.cshtml" />
    <None Include="Pages\Account\Logout\LoggedOut.cshtml" />
    <None Include="Pages\Ciba\All.cshtml" />
    <None Include="Pages\Ciba\Consent.cshtml" />
    <None Include="Pages\Ciba\Index.cshtml" />
    <None Include="Pages\Ciba\_ScopeListItem.cshtml" />
    <None Include="Pages\Consent\Index.cshtml" />
    <None Include="Pages\Consent\_ScopeListItem.cshtml" />
    <None Include="Pages\Device\Index.cshtml" />
    <None Include="Pages\Device\Success.cshtml" />
    <None Include="Pages\Device\_ScopeListItem.cshtml" />
    <None Include="Pages\Diagnostics\Index.cshtml" />
    <None Include="Pages\ExternalLogin\Callback.cshtml" />
    <None Include="Pages\ExternalLogin\Challenge.cshtml" />
    <None Include="Pages\Grants\Index.cshtml" />
    <None Include="Pages\Home\Error\Index.cshtml" />
    <None Include="Pages\Redirect\Index.cshtml" />
    <None Include="Pages\ServerSideSessions\Index.cshtml" />
  </ItemGroup>

  <!--<ItemGroup>
    <TypeScriptCompile Include="ClientApp\src\app\auth-config.module.ts" />
  </ItemGroup>-->

  <ItemGroup>
    <Compile Update="Properties\Resources.Designer.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
  </ItemGroup>

  <ItemGroup>
    <EmbeddedResource Update="Properties\Resources.resx">
      <Generator>PublicResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
  </ItemGroup>

  <Target Name="DebugEnsureNodeEnv" BeforeTargets="Build" Condition=" '$(Configuration)' == 'Debug' And !Exists('$(SpaRoot)node_modules') ">
    <!-- Ensure Node.js is installed -->
    <Exec Command="node --version" ContinueOnError="true">
      <Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
    </Exec>
    <Error Condition="'$(ErrorCode)' != '0'" Text="Node.js is required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE." />
    <Message Importance="high" Text="Restoring dependencies using 'npm'. This may take several minutes..." />
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
  </Target>

  <PropertyGroup Label="Configuration" Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <TypeScriptTarget>ES5</TypeScriptTarget>
  </PropertyGroup>

  <PropertyGroup Label="Configuration" Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
    <TypeScriptTarget>ES5</TypeScriptTarget>
  </PropertyGroup>

  <!-- Auto-generated Open API specification and Angular TypeScript clients -->
  <PropertyGroup>
    <RunPostBuildEvent>OnBuildSuccess</RunPostBuildEvent>
  </PropertyGroup>

  <Target Name="NSwag" AfterTargets="PostBuildEvent" Condition=" '$(Configuration)' == 'Debug' And '$(SkipNSwag)' != 'True' ">
    <Exec ConsoleToMSBuild="true" ContinueOnError="true" WorkingDirectory="$(ProjectDir)" EnvironmentVariables="ASPNETCORE_ENVIRONMENT=Development" Command="$(NSwagExe_Net80) run config.nswag /variables:Configuration=$(Configuration)">
      <Output TaskParameter="ExitCode" PropertyName="NSwagExitCode" />
      <Output TaskParameter="ConsoleOutput" PropertyName="NSwagOutput" />
    </Exec>

    <Message Text="$(NSwagOutput)" Condition="'$(NSwagExitCode)' == '0'" Importance="low" />
    <Error Text="$(NSwagOutput)" Condition="'$(NSwagExitCode)' != '0'" />
  </Target>

  <Target Name="PublishRunWebpack" AfterTargets="ComputeFilesToPublish">
    <!-- As part of publishing, ensure the JS resources are freshly built in production mode -->
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm run build -- --configuration production" />

    <!-- Include the newly-built files in the publish output -->
    <ItemGroup>
      <DistFiles Include="$(SpaRoot)dist\**; $(SpaRoot)dist-server\**" />
      <ResolvedFileToPublish Include="@(DistFiles->'%(FullPath)')" Exclude="@(ResolvedFileToPublish)">
        <RelativePath>wwwroot\%(RecursiveDir)%(FileName)%(Extension)</RelativePath>
        <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
        <ExcludeFromSingleFile>true</ExcludeFromSingleFile>
      </ResolvedFileToPublish>
    </ItemGroup>
  </Target>
</Project>
